import { Component, Input, ViewEncapsulation } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "./ngx-qrcode-styling.service";
class NgxQrcodeStylingComponent {
    constructor(canvas, service) {
        this.canvas = canvas;
        this.service = service;
        /**
         * TemplateType
         */
        this.template = 'default';
        /**
         * number
         */
        this.scale = 0;
        /**
         * string
         */
        this.rotate = 0;
    }
    ngOnInit() {
        if (this.canvas) {
            /**
             * @Input override
             */
            if (this.template)
                this.config = {
                    ...this.config,
                    template: this.template
                };
            if (this.type)
                this.config = {
                    ...this.config,
                    type: this.type
                };
            if (this.shape)
                this.config = {
                    ...this.config,
                    shape: this.shape
                };
            if (this.width)
                this.config = {
                    ...this.config,
                    width: this.width
                };
            if (this.height)
                this.config = {
                    ...this.config,
                    height: this.height
                };
            if (this.margin)
                this.config = {
                    ...this.config,
                    margin: this.margin
                };
            if (this.data)
                this.config = {
                    ...this.config,
                    data: this.data
                };
            if (this.image)
                this.config = {
                    ...this.config,
                    image: this.image
                };
            if (this.scale)
                this.config = {
                    ...this.config,
                    scale: this.scale
                };
            if (this.rotate)
                this.config = {
                    ...this.config,
                    rotate: this.rotate
                };
            if (this.frameOptions)
                this.config = {
                    ...this.config,
                    frameOptions: this.frameOptions
                };
            if (this.qrOptions)
                this.config = {
                    ...this.config,
                    qrOptions: this.qrOptions
                };
            if (this.imageOptions)
                this.config = {
                    ...this.config,
                    imageOptions: this.imageOptions
                };
            if (this.dotsOptions)
                this.config = {
                    ...this.config,
                    dotsOptions: this.dotsOptions
                };
            if (this.cornersSquareOptions)
                this.config = {
                    ...this.config,
                    cornersSquareOptions: this.cornersSquareOptions
                };
            if (this.cornersDotOptions)
                this.config = {
                    ...this.config,
                    cornersDotOptions: this.cornersDotOptions
                };
            if (this.backgroundOptions)
                this.config = {
                    ...this.config,
                    backgroundOptions: this.backgroundOptions
                };
            this.create(this.config);
        }
    }
    /**
     * create
     * @param config
     * @returns
     */
    create(config) {
        return this.service.create(config, this.canvas.nativeElement);
    }
    /**
     * update
     * @param config
     * @param configUpdate
     * @returns
     */
    update(config, configUpdate) {
        return this.service.update(config, configUpdate, this.canvas.nativeElement);
    }
    /**
     * download image
     * @param fileName eg: demo.png
     * @param timeout
     * @returns
     */
    download(fileName, timeout = 0) {
        return this.service.download(this.canvas.nativeElement, fileName, timeout);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.0.4", ngImport: i0, type: NgxQrcodeStylingComponent, deps: [{ token: i0.ElementRef }, { token: i1.NgxQrcodeStylingService }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.0.4", type: NgxQrcodeStylingComponent, selector: "ngx-qrcode-styling", inputs: { config: "config", template: "template", type: "type", shape: "shape", width: "width", height: "height", margin: "margin", data: "data", image: "image", scale: "scale", rotate: "rotate", frameOptions: "frameOptions", qrOptions: "qrOptions", imageOptions: "imageOptions", dotsOptions: "dotsOptions", cornersSquareOptions: "cornersSquareOptions", cornersDotOptions: "cornersDotOptions", backgroundOptions: "backgroundOptions" }, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, encapsulation: i0.ViewEncapsulation.None }); }
}
export { NgxQrcodeStylingComponent };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.0.4", ngImport: i0, type: NgxQrcodeStylingComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'ngx-qrcode-styling',
                    template: '<ng-content></ng-content>',
                    encapsulation: ViewEncapsulation.None
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i1.NgxQrcodeStylingService }]; }, propDecorators: { config: [{
                type: Input
            }], template: [{
                type: Input
            }], type: [{
                type: Input
            }], shape: [{
                type: Input
            }], width: [{
                type: Input
            }], height: [{
                type: Input
            }], margin: [{
                type: Input
            }], data: [{
                type: Input
            }], image: [{
                type: Input
            }], scale: [{
                type: Input
            }], rotate: [{
                type: Input
            }], frameOptions: [{
                type: Input
            }], qrOptions: [{
                type: Input
            }], imageOptions: [{
                type: Input
            }], dotsOptions: [{
                type: Input
            }], cornersSquareOptions: [{
                type: Input
            }], cornersDotOptions: [{
                type: Input
            }], backgroundOptions: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LXFyY29kZS1zdHlsaW5nLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL25neC1xcmNvZGUtc3R5bGluZy9zcmMvbGliL25neC1xcmNvZGUtc3R5bGluZy5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBYyxLQUFLLEVBQVUsaUJBQWlCLEVBQUUsTUFBTSxlQUFlLENBQUM7OztBQW9CeEYsTUFLYSx5QkFBeUI7SUFpSnBDLFlBQ1UsTUFBa0IsRUFDbEIsT0FBZ0M7UUFEaEMsV0FBTSxHQUFOLE1BQU0sQ0FBWTtRQUNsQixZQUFPLEdBQVAsT0FBTyxDQUF5QjtRQTNJMUM7O1dBRUc7UUFFSSxhQUFRLEdBQWlCLFNBQVMsQ0FBQztRQTRDMUM7O1dBRUc7UUFFSSxVQUFLLEdBQVcsQ0FBQyxDQUFDO1FBRXpCOztXQUVHO1FBRUksV0FBTSxHQUFXLENBQUMsQ0FBQztJQWtGdEIsQ0FBQztJQUVMLFFBQVE7UUFDTixJQUFJLElBQUksQ0FBQyxNQUFNLEVBQUU7WUFFZjs7ZUFFRztZQUNILElBQUksSUFBSSxDQUFDLFFBQVE7Z0JBQ2YsSUFBSSxDQUFDLE1BQU0sR0FBRztvQkFDWixHQUFHLElBQUksQ0FBQyxNQUFNO29CQUNkLFFBQVEsRUFBRSxJQUFJLENBQUMsUUFBUTtpQkFDeEIsQ0FBQztZQUVKLElBQUksSUFBSSxDQUFDLElBQUk7Z0JBQ1gsSUFBSSxDQUFDLE1BQU0sR0FBRztvQkFDWixHQUFHLElBQUksQ0FBQyxNQUFNO29CQUNkLElBQUksRUFBRSxJQUFJLENBQUMsSUFBSTtpQkFDaEIsQ0FBQztZQUVKLElBQUksSUFBSSxDQUFDLEtBQUs7Z0JBQ1osSUFBSSxDQUFDLE1BQU0sR0FBRztvQkFDWixHQUFHLElBQUksQ0FBQyxNQUFNO29CQUNkLEtBQUssRUFBRSxJQUFJLENBQUMsS0FBSztpQkFDbEIsQ0FBQztZQUVKLElBQUks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VztzQkFEVixLQUFLO2dCQVdOLG9CQUFvQjtzQkFEbkIsS0FBSztnQkFXTixpQkFBaUI7c0JBRGhCLEtBQUs7Z0JBV04saUJBQWlCO3NCQURoQixLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBFbGVtZW50UmVmLCBJbnB1dCwgT25Jbml0LCBWaWV3RW5jYXBzdWxhdGlvbiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBBc3luY1N1YmplY3QgfSBmcm9tICdyeGpzJztcclxuXHJcbmltcG9ydCB7XHJcbiAgQ29ybmVyRG90VHlwZSxcclxuICBDb3JuZXJTcXVhcmVUeXBlLFxyXG4gIERvdFR5cGUsXHJcbiAgRHJhd1R5cGUsXHJcbiAgRXJyb3JDb3JyZWN0aW9uTGV2ZWwsXHJcbiAgRnJhbWVTdHlsZSxcclxuICBHcmFkaWVudCxcclxuICBNb2RlLFxyXG4gIE9wdGlvbnMsXHJcbiAgU2hhcGVUeXBlLFxyXG4gIFRlbXBsYXRlVHlwZSxcclxuICBUeXBlTnVtYmVyLFxyXG4gIFVua25vd25PYmplY3QsXHJcbn0gZnJvbSAnLi9uZ3gtcXJjb2RlLXN0eWxpbmcub3B0aW9ucyc7XHJcbmltcG9ydCB7IE5neFFyY29kZVN0eWxpbmdTZXJ2aWNlIH0gZnJvbSAnLi9uZ3gtcXJjb2RlLXN0eWxpbmcuc2VydmljZSc7XHJcblxyXG5AQ29tcG9uZW50KHtcclxuICBzZWxlY3RvcjogJ25neC1xcmNvZGUtc3R5bGluZycsXHJcbiAgdGVtcGxhdGU6ICc8bmctY29udGVudD48L25nLWNvbnRlbnQ+JyxcclxuICBlbmNhcHN1bGF0aW9uOiBWaWV3RW5jYXBzdWxhdGlvbi5Ob25lXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBOZ3hRcmNvZGVTdHlsaW5nQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcclxuXHJcbiAgLyoqXHJcbiAgICogT3B0aW9uc1xyXG4gICAqL1xyXG4gIEBJbnB1dCgpXHJcbiAgcHVibGljIGNvbmZpZyE6IE9wdGlvbnM7XHJcblxyXG4gIC8qKlxyXG4gICAqIFRlbXBsYXRlVHlwZVxyXG4gICAqL1xyXG4gIEBJbnB1dCgpXHJcbiAgcHVibGljIHRlbXBsYXRlOiBUZW1wbGF0ZVR5cGUgPSAnZGVmYXVsdCc7XHJcblxyXG4gIC8qKlxyXG4gICAqIERyYXdUeXBlXHJcbiAgICovXHJcbiAgQElucHV0KClcclxuICBwdWJsaWMgdHlwZSE6IERyYXdUeXBlO1xyXG5cclxuICAvKipcclxuICAgKiBTaGFwZVR5cGVcclxuICAgKi9cclxuICBASW5wdXQoKVxyXG4gIHB1YmxpYyBzaGFwZSE6IFNoYXBlVHlwZTtcclxuXHJcbiAgLyoqXHJcbiAgICogbnVtYmVyXHJcbiAgICovXHJcbiAgQElucHV0KClcclxuICBwdWJsaWMgd2lkdGghOiBudW1iZXI7XHJcblxyXG4gIC8qKlxyXG4gICAqIG51bWJlclxyXG4gICAqL1xyXG4gIEBJbnB1dCgpXHJcbiAgcHVibGljIGhlaWdodCE6IG51bWJlcjtcclxuXHJcbiAgLyoqXHJcbiAgICogbnVtYmVyXHJcbiAgICovXHJcbiAgQElucHV0KClcclxuICBwdWJsaWMgbWFyZ2luITogbnVtYmVyO1xyXG5cclxuICAvKipcclxuICAgKiBzdHJpbmdcclxuICAgKi9cclxuICBASW5wdXQoKVxyXG4gIHB1YmxpYyBkYXRhITogc3RyaW5nO1xyXG5cclxuICAvKipcclxuICAgKiBzdHJpbmdcclxuICAgKi9cclxuICBASW5wdXQoKVxyXG4gIHB1YmxpYyBpbWFnZSE6IHN0cmluZztcclxuXHJcbiAgLyoqXHJcbiAgICogbnVtYmVyXHJcbiAgICovXHJcbiAgQElucHV0KClcclxuICBwdWJsaWMgc2NhbGU6IG51bWJlciA9IDA7XHJcblxyXG4gIC8qKlxyXG4gICAqIHN0cmluZ1xyXG4gICAqL1xyXG4gIEBJbnB1dCgpXHJcbiAgcHVibGljIHJvdGF0ZTogbnVtYmVyID0gMDtcclxuXHJcbiAgLyoqXHJcbiAgICogb2JqZWN0XHJcbiAgICovXHJcbiAgQElucHV0KClcclxuICBwdWJsaWMgZnJhbWVPcHRpb25zIToge1xyXG4gICAgc3R5bGU/OiBGcmFtZVN0eWxlO1xyXG4gICAgaGVpZ2h0PzogbnVtYmVyO1xyXG4gICAgd2lkdGg/OiBudW1iZXI7XHJcbiAgICB4PzogbnVtYmVyO1xyXG4gICAgeT86IG51bWJlcjtcclxuICAgIGJhY2tncm91bmQ/OiBzdHJpbmc7XHJcbiAgICB0ZXh0cz86IFVua25vd25PYmplY3RbXTtcclxuICAgIGNvbnRlbnRzPzogVW5rbm93bk9iamVjdFtdO1xyXG4gICAgY29udGFpbmVycz86IFVua25vd25PYmplY3RbXTtcclxuICB9O1xyXG5cclxuICAvKipcclxuICAgKiBvYmplY3RcclxuICAgKi9cclxuICBASW5wdXQoKVxyXG4gIHFyT3B0aW9ucyE6IHtcclxuICAgIHR5cGVOdW1iZXI/OiBUeXBlTnVtYmVyO1xyXG4gICAgbW9kZT86IE1vZGU7XHJcbiAgICBlcnJvckNvcnJlY3Rpb25MZXZlbD86IEVycm9yQ29ycmVjdGlvbkxldmVsO1xyXG4gIH07XHJcblxyXG4gIC8qKlxyXG4gICAqIG9iamVjdFxyXG4gICAqL1xyXG4gIEBJbnB1dCgpXHJcbiAgaW1hZ2VPcHRpb25zIToge1xyXG4gICAgaGlkZUJhY2tncm91bmREb3RzPzogYm9vbGVhbjtcclxuICAgIGltYWdlU2l6ZT86IG51bWJlcjtcclxuICAgIGNyb3NzT3JpZ2luPzogc3RyaW5nO1xyXG4gICAgbWFyZ2luPzogbnVtYmVyO1xyXG4gIH07XHJcblxyXG4gIC8qKlxyXG4gICAqIG9iamVjdFxyXG4gICAqL1xyXG4gIEBJbnB1dCgpXHJcbiAgZG90c09wdGlvbnMhOiB7XHJcbiAgICB0eXBlPzogRG90VHlwZTtcclxuICAgIGNvbG9yPzogc3RyaW5nO1xyXG4gICAgZ3JhZGllbnQ/OiBHcmFkaWVudDtcclxuICB9O1xyXG5cclxuICAvKipcclxuICAgKiBvYmplY3RcclxuICAgKi9cclxuICBASW5wdXQoKVxyXG4gIGNvcm5lcnNTcXVhcmVPcHRpb25zIToge1xyXG4gICAgdHlwZT86IENvcm5lclNxdWFyZVR5cGU7XHJcbiAgICBjb2xvcj86IHN0cmluZztcclxuICAgIGdyYWRpZW50PzogR3JhZGllbnQ7XHJcbiAgfTtcclxuXHJcbiAgLyoqXHJcbiAgICogb2JqZWN0XHJcbiAgICovXHJcbiAgQElucHV0KClcclxuICBjb3JuZXJzRG90T3B0aW9ucyE6IHtcclxuICAgIHR5cGU/OiBDb3JuZXJEb3RUeXBlO1xyXG4gICAgY29sb3I/OiBzdHJpbmc7XHJcbiAgICBncmFkaWVudD86IEdyYWRpZW50O1xyXG4gIH07XHJcblxyXG4gIC8qKlxyXG4gICAqIG9iamVjdFxyXG4gICAqL1xyXG4gIEBJbnB1dCgpXHJcbiAgYmFja2dyb3VuZE9wdGlvbnMhOiB7XHJcbiAgICByb3VuZD86IG51bWJlcjtcclxuICAgIGNvbG9yPzogc3RyaW5nO1xyXG4gICAgZ3JhZGllbnQ/OiBHcmFkaWVudDtcclxuICB9O1xyXG5cclxuICBjb25zdHJ1Y3RvcihcclxuICAgIHByaXZhdGUgY2FudmFzOiBFbGVtZW50UmVmLFxyXG4gICAgcHJpdmF0ZSBzZXJ2aWNlOiBOZ3hRcmNvZGVTdHlsaW5nU2VydmljZVxyXG4gICkgeyB9XHJcblxyXG4gIG5nT25Jbml0KCk6IHZvaWQge1xyXG4gICAgaWYgKHRoaXMuY2FudmFzKSB7XHJcblxyXG4gICAgICAvKipcclxuICAgICAgICogQElucHV0IG92ZXJyaWRlXHJcbiAgICAgICAqL1xyXG4gICAgICBpZiAodGhpcy50ZW1wbGF0ZSlcclxuICAgICAgICB0aGlzLmNvbmZpZyA9IHtcclxuICAgICAgICAgIC4uLnRoaXMuY29uZmlnLFxyXG4gICAgICAgICAgdGVtcGxhdGU6IHRoaXMudGVtcGxhdGVcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgaWYgKHRoaXMudHlwZSlcclxuICAgICAgICB0aGlzLmNvbmZpZyA9IHtcclxuICAgICAgICAgIC4uLnRoaXMuY29uZmlnLFxyXG4gICAgICAgICAgdHlwZTogdGhpcy50eXBlXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgIGlmICh0aGlzLnNoYXBlKVxyXG4gICAgICAgIHRoaXMuY29uZmlnID0ge1xyXG4gICAgICAgICAgLi4udGhpcy5jb25maWcsXHJcbiAgICAgICAgICBzaGFwZTogdGhpcy5zaGFwZVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICBpZiAodGhpcy53aWR0aClcclxuICAgICAgICB0aGlzLmNvbmZpZyA9IHtcclxuICAgICAgICAgIC4uLnRoaXMuY29uZmlnLFxyXG4gICAgICAgICAgd2lkdGg6IHRoaXMud2lkdGhcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgaWYgKHRoaXMuaGVpZ2h0KVxyXG4gICAgICAgIHRoaXMuY29uZmlnID0ge1xyXG4gICAgICAgICAgLi4udGhpcy5jb25maWcsXHJcbiAgICAgICAgICBoZWlnaHQ6IHRoaXMuaGVpZ2h0XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgIGlmICh0aGlzLm1hcmdpbilcclxuICAgICAgICB0aGlzLmNvbmZpZyA9IHtcclxuICAgICAgICAgIC4uLnRoaXMuY29uZmlnLFxyXG4gICAgICAgICAgbWFyZ2luOiB0aGlzLm1hcmdpblxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICBpZiAodGhpcy5kYXRhKVxyXG4gICAgICAgIHRoaXMuY29uZmlnID0ge1xyXG4gICAgICAgICAgLi4udGhpcy5jb25maWcsXHJcbiAgICAgICAgICBkYXRhOiB0aGlzLmRhdGFcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgaWYgKHRoaXMuaW1hZ2UpXHJcbiAgICAgICAgdGhpcy5jb25maWcgPSB7XHJcbiAgICAgICAgICAuLi50aGlzLmNvbmZpZyxcclxuICAgICAgICAgIGltYWdlOiB0aGlzLmltYWdlXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgIGlmICh0aGlzLnNjYWxlKVxyXG4gICAgICAgIHRoaXMuY29uZmlnID0ge1xyXG4gICAgICAgICAgLi4udGhpcy5jb25maWcsXHJcbiAgICAgICAgICBzY2FsZTogdGhpcy5zY2FsZVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICBpZiAodGhpcy5yb3RhdGUpXHJcbiAgICAgICAgdGhpcy5jb25maWcgPSB7XHJcbiAgICAgICAgICAuLi50aGlzLmNvbmZpZyxcclxuICAgICAgICAgIHJvdGF0ZTogdGhpcy5yb3RhdGVcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgaWYgKHRoaXMuZnJhbWVPcHRpb25zKVxyXG4gICAgICAgIHRoaXMuY29uZmlnID0ge1xyXG4gICAgICAgICAgLi4udGhpcy5jb25maWcsXHJcbiAgICAgICAgICBmcmFtZU9wdGlvbnM6IHRoaXMuZnJhbWVPcHRpb25zXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgIGlmICh0aGlzLnFyT3B0aW9ucylcclxuICAgICAgICB0aGlzLmNvbmZpZyA9IHtcclxuICAgICAgICAgIC4uLnRoaXMuY29uZmlnLFxyXG4gICAgICAgICAgcXJPcHRpb25zOiB0aGlzLnFyT3B0aW9uc1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICBpZiAodGhpcy5pbWFnZU9wdGlvbnMpXHJcbiAgICAgICAgdGhpcy5jb25maWcgPSB7XHJcbiAgICAgICAgICAuLi50aGlzLmNvbmZpZyxcclxuICAgICAgICAgIGltYWdlT3B0aW9uczogdGhpcy5pbWFnZU9wdGlvbnNcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgaWYgKHRoaXMuZG90c09wdGlvbnMpXHJcbiAgICAgICAgdGhpcy5jb25maWcgPSB7XHJcbiAgICAgICAgICAuLi50aGlzLmNvbmZpZyxcclxuICAgICAgICAgIGRvdHNPcHRpb25zOiB0aGlzLmRvdHNPcHRpb25zXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgIGlmICh0aGlzLmNvcm5lcnNTcXVhcmVPcHRpb25zKVxyXG4gICAgICAgIHRoaXMuY29uZmlnID0ge1xyXG4gICAgICAgICAgLi4udGhpcy5jb25maWcsXHJcbiAgICAgICAgICBjb3JuZXJzU3F1YXJlT3B0aW9uczogdGhpcy5jb3JuZXJzU3F1YXJlT3B0aW9uc1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICBpZiAodGhpcy5jb3JuZXJzRG90T3B0aW9ucylcclxuICAgICAgICB0aGlzLmNvbmZpZyA9IHtcclxuICAgICAgICAgIC4uLnRoaXMuY29uZmlnLFxyXG4gICAgICAgICAgY29ybmVyc0RvdE9wdGlvbnM6IHRoaXMuY29ybmVyc0RvdE9wdGlvbnNcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgaWYgKHRoaXMuYmFja2dyb3VuZE9wdGlvbnMpXHJcbiAgICAgICAgdGhpcy5jb25maWcgPSB7XHJcbiAgICAgICAgICAuLi50aGlzLmNvbmZpZyxcclxuICAgICAgICAgIGJhY2tncm91bmRPcHRpb25zOiB0aGlzLmJhY2tncm91bmRPcHRpb25zXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgIHRoaXMuY3JlYXRlKHRoaXMuY29uZmlnKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGNyZWF0ZVxyXG4gICAqIEBwYXJhbSBjb25maWcgXHJcbiAgICogQHJldHVybnMgXHJcbiAgICovXHJcbiAgcHVibGljIGNyZWF0ZShjb25maWc6IE9wdGlvbnMpOiBBc3luY1N1YmplY3Q8YW55PiB7XHJcbiAgICByZXR1cm4gdGhpcy5zZXJ2aWNlLmNyZWF0ZShjb25maWcsIHRoaXMuY2FudmFzLm5hdGl2ZUVsZW1lbnQpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogdXBkYXRlXHJcbiAgICogQHBhcmFtIGNvbmZpZyBcclxuICAgKiBAcGFyYW0gY29uZmlnVXBkYXRlIFxyXG4gICAqIEByZXR1cm5zIFxyXG4gICAqL1xyXG4gIHB1YmxpYyB1cGRhdGUoY29uZmlnOiBPcHRpb25zLCBjb25maWdVcGRhdGU6IE9wdGlvbnMpOiBBc3luY1N1YmplY3Q8YW55PiB7XHJcbiAgICByZXR1cm4gdGhpcy5zZXJ2aWNlLnVwZGF0ZShjb25maWcsIGNvbmZpZ1VwZGF0ZSwgdGhpcy5jYW52YXMubmF0aXZlRWxlbWVudCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBkb3dubG9hZCBpbWFnZVxyXG4gICAqIEBwYXJhbSBmaWxlTmFtZSBlZzogZGVtby5wbmdcclxuICAgKiBAcGFyYW0gdGltZW91dCBcclxuICAgKiBAcmV0dXJucyBcclxuICAgKi9cclxuICBwdWJsaWMgZG93bmxvYWQoZmlsZU5hbWU/OiBzdHJpbmcsIHRpbWVvdXQgPSAwKTogQXN5bmNTdWJqZWN0PGFueT4ge1xyXG4gICAgcmV0dXJuIHRoaXMuc2VydmljZS5kb3dubG9hZCh0aGlzLmNhbnZhcy5uYXRpdmVFbGVtZW50LCBmaWxlTmFtZSwgdGltZW91dCk7XHJcbiAgfVxyXG59XHJcbiJdfQ==